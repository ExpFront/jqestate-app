'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _page = require('./page');

var _page2 = _interopRequireDefault(_page);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
ow it looks like
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * First | Prev | ... | 6 | 7 | 8 | 9 | ... | Next | Last
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ```
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var BASE_SHIFT = 0;
var TITLE_SHIFT = 1;
var TITLES = {
  first: 'First',
  prev: '«',
  prevSet: '...',
  nextSet: '...',
  next: '»',
  last: 'Last'
};

function range(start, end) {
  var res = [];

  for (var i = start; i < end; i++) {
    res.push(i);
  }

  return res;
}

exports.default = function () {
  var styles = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (_Component) {
    _inherits(_class, _Component);

    function _class(props) {
      _classCallCheck(this, _class);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this, props));

      _this.handlePageChanged = _this.handlePageChanged.bind(_this);
      _this.handleFirstPage = _this.handleFirstPage.bind(_this);
      _this.handlePreviousPage = _this.handlePreviousPage.bind(_this);
      _this.handleNextPage = _this.handleNextPage.bind(_this);
      _this.handleLastPage = _this.handleLastPage.bind(_this);
      _this.handleMorePrevPages = _this.handleMorePrevPages.bind(_this);
      _this.handleMoreNextPages = _this.handleMoreNextPages.bind(_this);
      _this.calcBlocks = _this.calcBlocks.bind(_this);
      _this.isPrevDisabled = _this.isPrevDisabled.bind(_this);
      _this.isNextDisabled = _this.isNextDisabled.bind(_this);
      _this.isPrevMoreHidden = _this.isPrevMoreHidden.bind(_this);
      _this.isNextMoreHidden = _this.isNextMoreHidden.bind(_this);
      _this.visibleRange = _this.visibleRange.bind(_this);
      _this.getTitles = _this.getTitles.bind(_this);
      _this.renderPages = _this.renderPages.bind(_this);
      return _this;
    }

    _createClass(_class, [{
      key: 'handleFirstPage',
      value: function handleFirstPage() {
        if (this.isPrevDisabled()) return;
        this.handlePageChanged(BASE_SHIFT);
      }
    }, {
      key: 'handlePreviousPage',
      value: function handlePreviousPage() {
        if (this.isPrevDisabled()) return;
        this.handlePageChanged(this.props.current - TITLE_SHIFT);
      }
    }, {
      key: 'handleNextPage',
      value: function handleNextPage() {
        if (this.isNextDisabled()) return;
        this.handlePageChanged(this.props.current + TITLE_SHIFT);
      }
    }, {
      key: 'handleLastPage',
      value: function handleLastPage() {
        if (this.isNextDisabled()) return;
        this.handlePageChanged(this.props.total - TITLE_SHIFT);
      }
    }, {
      key: 'handleMorePrevPages',
      value: function handleMorePrevPages() {
        var blocks = this.calcBlocks();
        this.handlePageChanged(blocks.current * blocks.size - TITLE_SHIFT);
      }
    }, {
      key: 'handleMoreNextPages',
      value: function handleMoreNextPages() {
        var blocks = this.calcBlocks();
        this.handlePageChanged((blocks.current + TITLE_SHIFT) * blocks.size);
      }
    }, {
      key: 'handlePageChanged',
      value: function handlePageChanged(el) {
        var handler = this.props.onPageChanged;

        if (handler) handler(el);
      }
    }, {
      key: 'calcBlocks',
      value: function calcBlocks() {
        var _props = this.props;
        var total = _props.total;
        var visiblePages = _props.visiblePages;

        var current = this.props.current + TITLE_SHIFT;
        var blockSize = visiblePages;
        var blocks = Math.ceil(total / blockSize);
        var currentBlock = Math.ceil(current / blockSize) - TITLE_SHIFT;

        return {
          total: blocks,
          current: currentBlock,
          size: blockSize
        };
      }
    }, {
      key: 'isPrevDisabled',
      value: function isPrevDisabled() {
        return this.props.current <= BASE_SHIFT;
      }
    }, {
      key: 'isNextDisabled',
      value: function isNextDisabled() {
        return this.props.current >= this.props.total - TITLE_SHIFT;
      }
    }, {
      key: 'isPrevMoreHidden',
      value: function isPrevMoreHidden() {
        var blocks = this.calcBlocks();

        return blocks.total === TITLE_SHIFT || blocks.current === BASE_SHIFT;
      }
    }, {
      key: 'isNextMoreHidden',
      value: function isNextMoreHidden() {
        var blocks = this.calcBlocks();
        return blocks.total === TITLE_SHIFT || blocks.current === blocks.total - TITLE_SHIFT;
      }
    }, {
      key: 'visibleRange',
      value: function visibleRange() {
        var blocks = this.calcBlocks();
        var start = blocks.current * blocks.size;
        var delta = this.props.total - start;
        var end = start + (delta > blocks.size ? blocks.size : delta);

        return [start + TITLE_SHIFT, end + TITLE_SHIFT];
      }
    }, {
      key: 'getTitles',
      value: function getTitles(key) {
        var _props$titles = this.props.titles;
        var titles = _props$titles === undefined ? {} : _props$titles;


        return titles[key] || TITLES[key];
      }
    }, {
      key: 'renderPages',
      value: function renderPages(_ref) {
        var _this2 = this;

        var _ref2 = _slicedToArray(_ref, 2);

        var first = _ref2[0];
        var second = _ref2[1];

        return range(first, second).map(function (el, idx) {
          var current = el - TITLE_SHIFT;

          var onClick = _this2.handlePageChanged.bind(null, current);
          var isActive = _this2.props.current === current;

          return _react2.default.createElement(
            _page2.default,
            { styles: styles, key: idx, isActive: isActive, className: styles.btn, onClick: onClick },
            el
          );
        });
      }
    }, {
      key: 'render',
      value: function render() {
        var titles = this.getTitles;

        return _react2.default.createElement(
          'nav',
          { className: styles.navigation },
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-first-page',
              isDisabled: this.isPrevDisabled(),
              onClick: this.handleFirstPage },
            titles('first')
          ),
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-prev-page',
              isDisabled: this.isPrevDisabled(),
              onClick: this.handlePreviousPage },
            titles('prev')
          ),
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-prev-more',
              isHidden: this.isPrevMoreHidden(),
              onClick: this.handleMorePrevPages },
            titles('prevSet')
          ),
          this.renderPages(this.visibleRange()),
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-next-more',
              isHidden: this.isNextMoreHidden(),
              onClick: this.handleMoreNextPages },
            titles('nextSet')
          ),
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-next-page',
              isDisabled: this.isNextDisabled(),
              onClick: this.handleNextPage },
            titles('next')
          ),
          _react2.default.createElement(
            _page2.default,
            { styles: styles, className: styles.btn,
              key: 'pagination-last-page',
              isDisabled: this.isNextDisabled(),
              onClick: this.handleLastPage },
            titles('last')
          )
        );
      }
    }]);

    return _class;
  }(_react.Component);
};